// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0

package db

import (
	"context"
	"database/sql"
	"fmt"
)

type DBTX interface {
	ExecContext(context.Context, string, ...interface{}) (sql.Result, error)
	PrepareContext(context.Context, string) (*sql.Stmt, error)
	QueryContext(context.Context, string, ...interface{}) (*sql.Rows, error)
	QueryRowContext(context.Context, string, ...interface{}) *sql.Row
}

func New(db DBTX) *Queries {
	return &Queries{db: db}
}

func Prepare(ctx context.Context, db DBTX) (*Queries, error) {
	q := Queries{db: db}
	var err error
	if q.addAccountsBalanceStmt, err = db.PrepareContext(ctx, addAccountsBalance); err != nil {
		return nil, fmt.Errorf("error preparing query AddAccountsBalance: %w", err)
	}
	if q.createAccountsStmt, err = db.PrepareContext(ctx, createAccounts); err != nil {
		return nil, fmt.Errorf("error preparing query CreateAccounts: %w", err)
	}
	if q.createEntriesStmt, err = db.PrepareContext(ctx, createEntries); err != nil {
		return nil, fmt.Errorf("error preparing query CreateEntries: %w", err)
	}
	if q.createNewSessionStmt, err = db.PrepareContext(ctx, createNewSession); err != nil {
		return nil, fmt.Errorf("error preparing query CreateNewSession: %w", err)
	}
	if q.createTransfersStmt, err = db.PrepareContext(ctx, createTransfers); err != nil {
		return nil, fmt.Errorf("error preparing query CreateTransfers: %w", err)
	}
	if q.createUsersStmt, err = db.PrepareContext(ctx, createUsers); err != nil {
		return nil, fmt.Errorf("error preparing query CreateUsers: %w", err)
	}
	if q.deleteAccountsStmt, err = db.PrepareContext(ctx, deleteAccounts); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteAccounts: %w", err)
	}
	if q.deleteEntriesStmt, err = db.PrepareContext(ctx, deleteEntries); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteEntries: %w", err)
	}
	if q.deleteTransfersStmt, err = db.PrepareContext(ctx, deleteTransfers); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteTransfers: %w", err)
	}
	if q.getAccountsStmt, err = db.PrepareContext(ctx, getAccounts); err != nil {
		return nil, fmt.Errorf("error preparing query GetAccounts: %w", err)
	}
	if q.getAccountsForUpdateStmt, err = db.PrepareContext(ctx, getAccountsForUpdate); err != nil {
		return nil, fmt.Errorf("error preparing query GetAccountsForUpdate: %w", err)
	}
	if q.getEntriesStmt, err = db.PrepareContext(ctx, getEntries); err != nil {
		return nil, fmt.Errorf("error preparing query GetEntries: %w", err)
	}
	if q.getSesionStmt, err = db.PrepareContext(ctx, getSesion); err != nil {
		return nil, fmt.Errorf("error preparing query GetSesion: %w", err)
	}
	if q.getTransfersStmt, err = db.PrepareContext(ctx, getTransfers); err != nil {
		return nil, fmt.Errorf("error preparing query GetTransfers: %w", err)
	}
	if q.getUsersStmt, err = db.PrepareContext(ctx, getUsers); err != nil {
		return nil, fmt.Errorf("error preparing query GetUsers: %w", err)
	}
	if q.listAccountsStmt, err = db.PrepareContext(ctx, listAccounts); err != nil {
		return nil, fmt.Errorf("error preparing query ListAccounts: %w", err)
	}
	if q.listEntriesStmt, err = db.PrepareContext(ctx, listEntries); err != nil {
		return nil, fmt.Errorf("error preparing query ListEntries: %w", err)
	}
	if q.listTransfersStmt, err = db.PrepareContext(ctx, listTransfers); err != nil {
		return nil, fmt.Errorf("error preparing query ListTransfers: %w", err)
	}
	if q.updateAccountsBalanceStmt, err = db.PrepareContext(ctx, updateAccountsBalance); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateAccountsBalance: %w", err)
	}
	if q.updateEntriesAmountStmt, err = db.PrepareContext(ctx, updateEntriesAmount); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateEntriesAmount: %w", err)
	}
	if q.updateTransfersAmountStmt, err = db.PrepareContext(ctx, updateTransfersAmount); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateTransfersAmount: %w", err)
	}
	return &q, nil
}

func (q *Queries) Close() error {
	var err error
	if q.addAccountsBalanceStmt != nil {
		if cerr := q.addAccountsBalanceStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing addAccountsBalanceStmt: %w", cerr)
		}
	}
	if q.createAccountsStmt != nil {
		if cerr := q.createAccountsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createAccountsStmt: %w", cerr)
		}
	}
	if q.createEntriesStmt != nil {
		if cerr := q.createEntriesStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createEntriesStmt: %w", cerr)
		}
	}
	if q.createNewSessionStmt != nil {
		if cerr := q.createNewSessionStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createNewSessionStmt: %w", cerr)
		}
	}
	if q.createTransfersStmt != nil {
		if cerr := q.createTransfersStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createTransfersStmt: %w", cerr)
		}
	}
	if q.createUsersStmt != nil {
		if cerr := q.createUsersStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createUsersStmt: %w", cerr)
		}
	}
	if q.deleteAccountsStmt != nil {
		if cerr := q.deleteAccountsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteAccountsStmt: %w", cerr)
		}
	}
	if q.deleteEntriesStmt != nil {
		if cerr := q.deleteEntriesStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteEntriesStmt: %w", cerr)
		}
	}
	if q.deleteTransfersStmt != nil {
		if cerr := q.deleteTransfersStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteTransfersStmt: %w", cerr)
		}
	}
	if q.getAccountsStmt != nil {
		if cerr := q.getAccountsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getAccountsStmt: %w", cerr)
		}
	}
	if q.getAccountsForUpdateStmt != nil {
		if cerr := q.getAccountsForUpdateStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getAccountsForUpdateStmt: %w", cerr)
		}
	}
	if q.getEntriesStmt != nil {
		if cerr := q.getEntriesStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getEntriesStmt: %w", cerr)
		}
	}
	if q.getSesionStmt != nil {
		if cerr := q.getSesionStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getSesionStmt: %w", cerr)
		}
	}
	if q.getTransfersStmt != nil {
		if cerr := q.getTransfersStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getTransfersStmt: %w", cerr)
		}
	}
	if q.getUsersStmt != nil {
		if cerr := q.getUsersStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getUsersStmt: %w", cerr)
		}
	}
	if q.listAccountsStmt != nil {
		if cerr := q.listAccountsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listAccountsStmt: %w", cerr)
		}
	}
	if q.listEntriesStmt != nil {
		if cerr := q.listEntriesStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listEntriesStmt: %w", cerr)
		}
	}
	if q.listTransfersStmt != nil {
		if cerr := q.listTransfersStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listTransfersStmt: %w", cerr)
		}
	}
	if q.updateAccountsBalanceStmt != nil {
		if cerr := q.updateAccountsBalanceStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateAccountsBalanceStmt: %w", cerr)
		}
	}
	if q.updateEntriesAmountStmt != nil {
		if cerr := q.updateEntriesAmountStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateEntriesAmountStmt: %w", cerr)
		}
	}
	if q.updateTransfersAmountStmt != nil {
		if cerr := q.updateTransfersAmountStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateTransfersAmountStmt: %w", cerr)
		}
	}
	return err
}

func (q *Queries) exec(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (sql.Result, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).ExecContext(ctx, args...)
	case stmt != nil:
		return stmt.ExecContext(ctx, args...)
	default:
		return q.db.ExecContext(ctx, query, args...)
	}
}

func (q *Queries) query(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (*sql.Rows, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryContext(ctx, args...)
	default:
		return q.db.QueryContext(ctx, query, args...)
	}
}

func (q *Queries) queryRow(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) *sql.Row {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryRowContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryRowContext(ctx, args...)
	default:
		return q.db.QueryRowContext(ctx, query, args...)
	}
}

type Queries struct {
	db                        DBTX
	tx                        *sql.Tx
	addAccountsBalanceStmt    *sql.Stmt
	createAccountsStmt        *sql.Stmt
	createEntriesStmt         *sql.Stmt
	createNewSessionStmt      *sql.Stmt
	createTransfersStmt       *sql.Stmt
	createUsersStmt           *sql.Stmt
	deleteAccountsStmt        *sql.Stmt
	deleteEntriesStmt         *sql.Stmt
	deleteTransfersStmt       *sql.Stmt
	getAccountsStmt           *sql.Stmt
	getAccountsForUpdateStmt  *sql.Stmt
	getEntriesStmt            *sql.Stmt
	getSesionStmt             *sql.Stmt
	getTransfersStmt          *sql.Stmt
	getUsersStmt              *sql.Stmt
	listAccountsStmt          *sql.Stmt
	listEntriesStmt           *sql.Stmt
	listTransfersStmt         *sql.Stmt
	updateAccountsBalanceStmt *sql.Stmt
	updateEntriesAmountStmt   *sql.Stmt
	updateTransfersAmountStmt *sql.Stmt
}

func (q *Queries) WithTx(tx *sql.Tx) *Queries {
	return &Queries{
		db:                        tx,
		tx:                        tx,
		addAccountsBalanceStmt:    q.addAccountsBalanceStmt,
		createAccountsStmt:        q.createAccountsStmt,
		createEntriesStmt:         q.createEntriesStmt,
		createNewSessionStmt:      q.createNewSessionStmt,
		createTransfersStmt:       q.createTransfersStmt,
		createUsersStmt:           q.createUsersStmt,
		deleteAccountsStmt:        q.deleteAccountsStmt,
		deleteEntriesStmt:         q.deleteEntriesStmt,
		deleteTransfersStmt:       q.deleteTransfersStmt,
		getAccountsStmt:           q.getAccountsStmt,
		getAccountsForUpdateStmt:  q.getAccountsForUpdateStmt,
		getEntriesStmt:            q.getEntriesStmt,
		getSesionStmt:             q.getSesionStmt,
		getTransfersStmt:          q.getTransfersStmt,
		getUsersStmt:              q.getUsersStmt,
		listAccountsStmt:          q.listAccountsStmt,
		listEntriesStmt:           q.listEntriesStmt,
		listTransfersStmt:         q.listTransfersStmt,
		updateAccountsBalanceStmt: q.updateAccountsBalanceStmt,
		updateEntriesAmountStmt:   q.updateEntriesAmountStmt,
		updateTransfersAmountStmt: q.updateTransfersAmountStmt,
	}
}
